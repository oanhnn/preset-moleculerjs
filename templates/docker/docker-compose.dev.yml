version: '3.5'

networks:
  mysql-net:
    name: mysql-network
  redis-net:
    name: redis-network
  mongo-net:
    name: mongo-network
  nats-net:
    name: nats-network

volumes:
  mysql-vol: {}
  redis-vol: {}
  mongo-vol: {}
  minio-vol: {}

services:
  # NATS
  nats:
    image: nats:2
    networks:
      - nats-net
    ports:
      - 4222:4222
      - 6222:6222
      - 8222:8222
    restart: unless-stopped

  # Redis
  redis:
    image: redis:5-alpine
    command: redis-server --appendonly yes --bind 0.0.0.0
    networks:
      - redis-net
    ports:
      - 6379:6379
    restart: unless-stopped
    volumes:
      - redis-vol:/data
    healthcheck:
      test: PING=$$(redis-cli -h `hostname -i` -p 6379 ping) && [ "$$PING" == "PONG" ]
      start_period: 15s
      interval: 3s
      timeout: 3s
      retries: 10

  # MySQL
  mysql:
    image: mysql:8.0
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --bind-address=0.0.0.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-rootpass}
      - MYSQL_USER=${MYSQL_USER:-dbmaster}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-exampledb}
    networks:
      - mysql-net
    ports:
      - 3306:3306
    restart: unless-stopped
    volumes:
      - mysql-vol:/var/lib/mysql
    healthcheck:
      test: MYSQL_PWD=$$MYSQL_ROOT_PASSWORD mysqladmin -h `hostname -i` -P 3306 -u root --silent ping
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 10

  # S3 service
  minio:
    image: minio/minio:latest
    command: server /data
    labels:
      # Enable Traefik for this service
      - traefik.enable=true
      # Routing
      - traefik.http.routers.minio.entrypoints=websecure
      - traefik.http.routers.minio.rule=Host(`s3.${DOMAIN:?Variable not set}`)
      - traefik.http.routers.minio.service=minio-svc
      - traefik.http.routers.minio.tls=true
      - traefik.http.routers.minio.tls.certresolver=le
      - traefik.http.routers.minio.priority=10
      - traefik.http.services.minio-svc.loadbalancer.server.port=9000
    environment:
      - MINIO_ACCESS_KEY=${AWS_ACCESS_KEY_ID:?Variable not set}
      - MINIO_SECRET_KEY=${AWS_SECRET_ACCESS_KEY:?Variable not set}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    networks:
      - proxy-net
    ports:
      - 9000:9000
    restart: unless-stopped
    volumes:
      - minio-vol:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 5

  # Adminer
  dbadmin:
    image: adminer
    depends_on:
      - mysql
    environment:
      - ADMINER_DESIGN=flat
    networks:
      - mysql-net
      - proxy-net
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.dbadmin.entrypoints=https
      - traefik.http.routers.dbadmin.rule=Host(`dba.${DOMAIN:-example.com}`)
      - traefik.http.routers.dbadmin.middlewares=secured
      - traefik.http.routers.dbadmin.tls.certresolver=mycert
      - traefik.http.routers.dbadmin.tls.domains[0].main=dba.${DOMAIN:-example.com}

  #mongo
  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
    networks:
      - mongo-net
    ports:
      - 27017:27017
    restart: unless-stopped
    volumes:
      - mongo-vol:/data/db
